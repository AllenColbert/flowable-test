public Void execute(CommandContext commandContext) {
		ExecutionEntityManager executionEntityManager = org.flowable.engine.impl.util.CommandContextUtil.getExecutionEntityManager();

		TaskEntityManager taskEntityManager = CommandContextUtil.getTaskEntityManager();

		// 根据taskId获取执行实例信息

		TaskEntity taskEntity = taskEntityManager.findById(taskId);
		// 获取执行实例ID
		String executionId = taskEntity.getExecutionId();

		//根据执行实例ID获取执行实例，再通过执行实例获取父级执行实例
		ExecutionEntity executionEntity = executionEntityManager.findById(executionId);
		ExecutionEntity rootExecutionEntity = executionEntity.getParent();
		System.out.println(rootExecutionEntity);
		Process process = ProcessDefinitionUtil.getProcess(executionEntity.getProcessDefinitionId());

		//根据目标节点ID获取对应的流程元素
		FlowElement targetFlowElement = process.getFlowElement(targetNodeId);
		// 设置当前的执行实例ID对应的 CurrentFlowElement为目标节点，目标节点是一个参数，可以进行传递。
		executionEntity.setCurrentFlowElement(targetFlowElement);
		FlowableEngineAgenda flowableEngineAgenda = org.flowable.engine.impl.util.CommandContextUtil.getAgenda();
		// 触发一下，让执行实例往下运行
		flowableEngineAgenda.planContinueProcessInCompensation(executionEntity);
		// 删除当前的任务，注意：不能完成任务 比如：taskService.complete(taskId);
		taskEntityManager.delete(taskId);

		org.flowable.engine.impl.util.CommandContextUtil.getHistoryManager().recordTaskEnd(taskEntity, executionEntity,
				"shareniu-jump");

		org.flowable.engine.impl.util.CommandContextUtil.getHistoryManager().recordActivityEnd(executionEntity,
				"shareniu-jump");
		// HistoricActivityInstanceEntityImpl
		return null;
	}
